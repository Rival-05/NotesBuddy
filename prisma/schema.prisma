generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  AUTH RELATED MODELS

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


// USER RELATED MODELS

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          Role      @default(USER)

  isOnboarded   Boolean   @default(false)
  isBlocked     Boolean   @default(false)
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  deviceFingerprints DeviceFingerprint[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

enum University {
  MEDICAPS
  IPS
}

enum Degree {
  BTECH_CSE
  BTECH_IT
}

enum Year {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
}

enum Semester {
  FIRST_SEMESTER
  SECOND_SEMESTER
  THIRD_SEMESTER
  FOURTH_SEMESTER
  FIFTH_SEMESTER
  SIXTH_SEMESTER
  SEVENTH_SEMESTER
  EIGHTH_SEMESTER
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName     String
  lastName      String
  phoneNumber   String   @unique

  university    University
  degree        Degree
  year          Year
  semester      Semester

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profile")
}

model DeviceFingerprint {
  id           String   @id @default(cuid())
  userId       String 
  fingerprint  Json
  hash         String   @unique
  isActive     Boolean  @default(true)
  deviceLabel  String?
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("device_fingerprint")
}