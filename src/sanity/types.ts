/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Note = {
  _id: string;
  _type: "note";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  syllabus?: string;
  slug?: Slug;
  university?: "medicaps" | "ips";
  degree?: "btech-cse" | "btech-it";
  year?: "1st-year" | "2nd-year" | "3rd-year" | "4th-year";
  semester?: "1st-semester" | "2nd-semester" | "3rd-semester" | "4th-semester" | "5th-semester" | "6th-semester" | "7th-semester" | "8th-semester";
  subject?: string;
  isPremium?: boolean;
  tier?: "tier1" | "tier2" | "tier3";
  views?: number;
  content?: string;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Note | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: NOTES_QUERY
// Query: *[_type == "note" && defined(slug.current)] | order(_createdAt desc) {  _id,  title,  syllabus,  slug,  views,  university,  degree,  year,  semester,  subject}
export type NOTES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  syllabus: string | null;
  slug: Slug | null;
  views: number | null;
  university: "ips" | "medicaps" | null;
  degree: "btech-cse" | "btech-it" | null;
  year: "1st-year" | "2nd-year" | "3rd-year" | "4th-year" | null;
  semester: "1st-semester" | "2nd-semester" | "3rd-semester" | "4th-semester" | "5th-semester" | "6th-semester" | "7th-semester" | "8th-semester" | null;
  subject: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"note\" && defined(slug.current)] | order(_createdAt desc) {\n  _id,\n  title,\n  syllabus,\n  slug,\n  views,\n  university,\n  degree,\n  year,\n  semester,\n  subject\n}": NOTES_QUERYResult;
  }
}
